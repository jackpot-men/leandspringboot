1.先在pom.xml下引入依赖

2.SpringbootApplication 是程序的启动类，主要注解包含了
  2.1@SpringBootConfiguration //继承了Configuration，表示当前是注解类
     @Configuration,它就是JavaConfig形式的Spring Ioc容器的配置类使用的那个@Configuration是一个IoC容器的配置类.

  2.2@EnableAutoConfiguration // 开启springboot的注解功能，springboot的四大神器之一，其借助@import的帮助
     @EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器
     enableAutoConfiguration内继承了两个重要注解
        @AutoConfigurationPackage：自动配置包，引入了Registrar.class 其实是一个注册Bean， new PackageImport(metadata).getPackageName()它其实返回了当前主程序类的 同级以及子级     的包组件
        @Import: 导入自动配置的组件
        @Import(EnableAutoConfigurationImportSelector.class)，借助EnableAutoConfigurationImportSelector，@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器
        自动配置幕后英雄：SpringFactoriesLoader详解
        借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成！
        SpringFactoriesLoader属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件META-INF/spring.factories加载配置
        从classpath中搜寻所有的META-INF/spring.factories配置文件，
        并将其中org.springframework.boot.autoconfigure.EnableutoConfiguration对应的配置项通过反射（Java Refletion）实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，
        然后汇总为一个并加载到IoC容器
  2.3@ComponentScan // 扫描路径设置（具体使用待确认）
     @ComponentScan这个注解在Spring中很重要，它对应XML配置中的元素，
     @ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。
     我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。
     注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。
3.springboot 整合JPA。


4.springboot 整合redis、
